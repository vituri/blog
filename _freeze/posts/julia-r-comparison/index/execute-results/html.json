{
  "hash": "11959c7d95fa71bbeb1e6d5d682efaa5",
  "result": {
    "markdown": "---\ntitle: \"A quick Julia vs. R comparison\"\nauthor: \"G. Vituri\"\ndate: \"2023-10-02\"\ncategories: [r, julia]\n---\n\n\nIn this post I will compare Julia and R while solving several problems, mostly arithmetic. I also calculate the speed each piece of code will take to execute.\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# r\nbenchmark = function(...) {\n    bench::mark(...) |>\n    dplyr::select(`min`, `median`, `mem_alloc`, `n_gc`)\n}\n```\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\n# julia\nusing BenchmarkTools;\n```\n:::\n\n\n## Fibonacci\n\nCalculate the 1000th number of the Fibonacci sequence.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# r\n\nf1 = function(n) {\n    fib = rep(1L, n)\n\n    for (i in 3:n) {\n        fib[i] = fib[i-1] + fib[i-2]\n    }\n\n    fib\n}\n\nf1(40)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]         1         1         2         3         5         8        13\n [8]        21        34        55        89       144       233       377\n[15]       610       987      1597      2584      4181      6765     10946\n[22]     17711     28657     46368     75025    121393    196418    317811\n[29]    514229    832040   1346269   2178309   3524578   5702887   9227465\n[36]  14930352  24157817  39088169  63245986 102334155\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbenchmark(f1(40))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n       min   median mem_alloc\n  <bch:tm> <bch:tm> <bch:byt>\n1   3.19µs   7.03µs      208B\n```\n:::\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\n# julia\nfunction f1(n::Integer)\n    fib = ones(BigInt, n)\n    for i ∈ 3:n\n        fib[i] = fib[i-1] + fib[i-2]\n    end\n\n    fib\nend;\n\nf1(40)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n40-element Vector{BigInt}:\n         1\n         1\n         2\n         3\n         5\n         8\n        13\n        21\n        34\n        55\n         ⋮\n   2178309\n   3524578\n   5702887\n   9227465\n  14930352\n  24157817\n  39088169\n  63245986\n 102334155\n```\n:::\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\n@benchmark f1(40)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBenchmarkTools.Trial: 10000 samples with 10 evaluations.\n Range (min … max):  1.601 μs …  4.256 ms  ┊ GC (min … max):  0.00% … 51.43%\n Time  (median):     1.779 μs              ┊ GC (median):     0.00%\n Time  (mean ± σ):   3.588 μs ± 79.140 μs  ┊ GC (mean ± σ):  21.62% ±  0.98%\n\n  ▅█▇▅▄▂▁▄▆▆▅▄▁▁▁▁             ▁▂▂▂▂                         ▂\n  ██████████████████▇▆▇▇█▇█▇▇████████▇▆▄▅▄▂▄▄▄▆▆▅▃▄▄▃▃▄▃▃▂▃▂ █\n  1.6 μs       Histogram: log(frequency) by time     4.21 μs <\n\n Memory estimate: 2.18 KiB, allocs estimate: 79.\n```\n:::\n:::\n\n\n## Problem 2\n\netc.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}